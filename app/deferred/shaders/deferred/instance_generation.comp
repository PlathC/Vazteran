#version 450
#extension GL_KHR_vulkan_glsl: enable
#extension GL_ARB_compute_shader: enable

layout (set = 0, binding = 0) uniform UniformBuffer
{
    uint uMaxInstanceCount;
    uint uTime;
} uniforms;

layout (set = 0, binding = 1) buffer InstancesPosition
{
    vec4 values[];
} instancesPosition;

struct DrawCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout (set = 0, binding = 2) buffer DrawCommands
{
    DrawCommand command;
} draw;

layout (local_size_x = 256) in;

bool isVisible(int id)
{
    return id < abs(sin(float(uniforms.uTime) * 0.0005)) * float(uniforms.uMaxInstanceCount);
}

void main(void)
{
    const int id = int(gl_GlobalInvocationID.x);

    const int range = int(sqrt(float(uniforms.uMaxInstanceCount)));
    const int x = id % range - range / 2;
    const int y = id / range - range / 2;
    const vec3 position = vec3(x * 1.5f, y * 1.5f, sin(float(uniforms.uTime) * 1e-3f + id) * 5e-1f) * 1.75f;

    // const bool visible = id < abs(sin(float(uniforms.uTime) * 1e-4)) * float(uniforms.uMaxInstanceCount);
    if (isVisible(id))
    {
        const uint writeId = atomicAdd(draw.command.instanceCount, 1u);
        instancesPosition.values[writeId] = vec4(position, 1.);
    }
}
